{"version":3,"sources":["components/Buy.js","components/Navbar.js","components/Sell.js","App.js","reportWebVitals.js","index.js"],"names":["Buy","useEffect","loadweb3","loadblockchaindata","useState","loader","setLoader","currentAccount","setCurrentAccount","exchangeinstance","setExchangeInstance","balanceineth","setBalanceInEth","userapadbalance","setUserApadBalance","etheramountvalue","setEtherAmountValue","apadamount","setApadAmount","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","account","net","getId","apad","Contract","ApadAbi","abi","ApadAddress","address","methods","balanceOf","call","apadbalance","utils","fromWei","apadbalancewei","exchange","ExchangeAbi","ExchangeAddress","getBalance","balanceofeth","onsubmit","console","log","parseFloat","buy","a","toWei","toString","amountofethinwei","send","from","value","once","recepient","class","role","className","href","type","placeholder","onChange","event","target","etherAmount","id","onClick","Navbar","Sell","etherOutput","setEtherOutput","TokenAmountValue","setTokenAmountValue","sell","amount","TokenAmount","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.37ff552b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Web3 from 'web3'\r\nimport ApadAbi from '../contractsData/Alienpad.json'\r\nimport ApadAddress from '../contractsData/Alienpad-address.json'\r\nimport ExchangeAbi from '../contractsData/Exchange.json'\r\nimport ExchangeAddress from '../contractsData/Exchange-address.json'\r\n\r\nconst Buy = () => {\r\n  useEffect(() => {\r\n    loadweb3()\r\n    loadblockchaindata()\r\n  }, [])\r\n\r\n  const [loader, setLoader] = useState(true)\r\n  const [currentAccount, setCurrentAccount] = useState()\r\n  const [exchangeinstance, setExchangeInstance] = useState({})\r\n  const [balanceineth, setBalanceInEth] = useState(null)\r\n  const [userapadbalance, setUserApadBalance] = useState(null)\r\n  const [etheramountvalue , setEtherAmountValue] = useState()\r\n  const [apadamount , setApadAmount] = useState()\r\n\r\n  const loadweb3 = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    } else {\r\n      window.alert('metamask not found')\r\n    }\r\n  }\r\n\r\n  const loadblockchaindata = async () => {\r\n    setLoader(true)\r\n\r\n    const web3 = window.web3\r\n\r\n    const accounts = await web3.eth.getAccounts()\r\n\r\n    const account = accounts[0]\r\n    setCurrentAccount(account)\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n\r\n    if (networkId === 3) {\r\n      const apad = new web3.eth.Contract(ApadAbi.abi, ApadAddress.address)\r\n      const apadbalance = await apad.methods.balanceOf(account).call()\r\n      const apadbalancewei  = await web3.utils.fromWei(apadbalance,'ether')\r\n      setUserApadBalance(apadbalancewei)\r\n\r\n      const exchange = new web3.eth.Contract(\r\n        ExchangeAbi.abi,\r\n        ExchangeAddress.address,\r\n      )\r\n      setExchangeInstance(exchange)\r\n\r\n      const balanceofeth = await web3.eth.getBalance(account)\r\n      setBalanceInEth(web3.utils.fromWei(balanceofeth, 'ether'))\r\n      setLoader(false)\r\n    } else {\r\n      window.alert('please connect to ropsten network')\r\n    }\r\n  }\r\n\r\n  const onsubmit  = async ()=>{\r\n    console.log(parseFloat(etheramountvalue))\r\n    if(parseFloat(etheramountvalue) > 0){\r\n     await  buy(etheramountvalue)\r\n    }else{\r\n      window.alert(\"null value not allowed\")\r\n    }\r\n  }\r\n\r\n  const buy = async(a)=>{\r\n\r\n    const web3 = new Web3(window.ethereum);\r\n \r\n    const amountofethinwei = await web3.utils.toWei(a.toString())\r\n    await exchangeinstance.methods\r\n    .buy().send({from : currentAccount,value : amountofethinwei})\r\n    .once(\"recepient\",(recepient)=>{\r\n        window.alert(\"success\")\r\n    })\r\n  }\r\n\r\n\r\n  if (loader) {\r\n    return (\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"spinner-border\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div class=\"card text-center\">\r\n        <div class=\"card-header\">\r\n          <ul class=\"nav nav-pills card-header-pills gap-3\">\r\n            <li class=\"nav-item\">\r\n              <a class=\"btn btn-primary\" href=\"/buy\">\r\n                Buy\r\n              </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"btn btn-primary\" href=\"/sell\">\r\n                Sell\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"card-body \">\r\n          <p className=\"float-right\"> ETH: {balanceineth}</p>\r\n          <div class=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"Enter amount in Ether\"\r\n              value={etheramountvalue}\r\n              onChange={(event)=>{\r\n                setEtherAmountValue(event.target.value)\r\n                const etherAmount = event.target.value.toString();\r\n                setApadAmount(etherAmount * 1600);\r\n              }}\r\n            />\r\n            <span class=\"input-group-text\" id=\"basic-addon2\">\r\n              Ether\r\n            </span>\r\n          </div>\r\n          <p>Apad:{userapadbalance} </p>\r\n\r\n          <div class=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              value={apadamount}\r\n              placeholder=\"Enter amount in Apad token\"\r\n            />\r\n            <span class=\"input-group-text\" id=\"basic-addon2\">\r\n              Apad\r\n            </span>\r\n          </div>\r\n          <button type=\"button\" class=\"btn btn-dark \"onClick={onsubmit}>Buy</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Buy\r\n","import React from 'react'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark shadow mb-5\">\r\n    <p className=\"navbar-brand my-auto\">ERC20 swap</p>\r\n  </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React, { useEffect, useState } from 'react'\r\nimport Web3 from 'web3'\r\nimport ApadAbi from '../contractsData/Alienpad.json'\r\nimport ApadAddress from '../contractsData/Alienpad-address.json'\r\nimport ExchangeAbi from '../contractsData/Exchange.json'\r\nimport ExchangeAddress from '../contractsData/Exchange-address.json'\r\n\r\nconst Sell = () => {\r\n\r\n    useEffect(() => {\r\n        loadweb3()\r\n        loadblockchaindata()\r\n      }, [])\r\n\r\n\r\n  const [loader, setLoader] = useState(true)\r\n  const [currentAccount, setCurrentAccount] = useState()\r\n  const [exchangeinstance, setExchangeInstance] = useState({})\r\n  const [balanceineth, setBalanceInEth] = useState(null)\r\n  const [userapadbalance, setUserApadBalance] = useState(null)\r\n  const [etherOutput , setEtherOutput] = useState()\r\n  const [TokenAmountValue , setTokenAmountValue] = useState()\r\n\r\n\r\n  const loadweb3 = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    } else {\r\n      window.alert('metamask not found')\r\n    }\r\n  }\r\n\r\n  const loadblockchaindata = async () => {\r\n    setLoader(true)\r\n\r\n    const web3 = window.web3\r\n\r\n    const accounts = await web3.eth.getAccounts()\r\n\r\n    const account = accounts[0]\r\n    setCurrentAccount(account)\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n\r\n    if (networkId === 3) {\r\n      const apad = new web3.eth.Contract(ApadAbi.abi, ApadAddress.address)\r\n      const apadbalance = await apad.methods.balanceOf(account).call()\r\n      const apadbalancewei  = await web3.utils.fromWei(apadbalance,'ether')\r\n      setUserApadBalance(apadbalancewei)\r\n\r\n      const exchange = new web3.eth.Contract(\r\n        ExchangeAbi.abi,\r\n        ExchangeAddress.address,\r\n      )\r\n      setExchangeInstance(exchange)\r\n\r\n      const balanceofeth = await web3.eth.getBalance(account)\r\n      setBalanceInEth(web3.utils.fromWei(balanceofeth, 'ether'))\r\n      setLoader(false)\r\n    } else {\r\n      window.alert('please connect to ropsten network')\r\n    }\r\n  }\r\n\r\n\r\n  const onsubmit  = async ()=>{\r\n    console.log(parseFloat(TokenAmountValue))\r\n    if(parseFloat(TokenAmountValue) > 0){\r\n     await  sell(TokenAmountValue)\r\n    }else{\r\n      window.alert(\"null value not allowed\")\r\n    }\r\n  }\r\n\r\n\r\n  const sell = async(TokenAmountValue)=>{\r\n\r\n    const web3 = new Web3(window.ethereum);\r\n \r\n    const amount = await web3.utils.toWei(TokenAmountValue,\"ether\")\r\n\r\n    await exchangeinstance.methods\r\n    .sell(amount)\r\n    .send({from : currentAccount})\r\n    .once(\"recepient\",(recepient)=>{\r\n        window.alert(\"success\")\r\n    })\r\n  }\r\n\r\n\r\n  if (loader) {\r\n    return (\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"spinner-border\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div class=\"card text-center\">\r\n        <div class=\"card-header\">\r\n          <ul class=\"nav nav-pills card-header-pills gap-3\">\r\n            <li class=\"nav-item\">\r\n              <a class=\"btn btn-primary\" href=\"/\">\r\n                Buy\r\n              </a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n              <a class=\"btn btn-primary\" href=\"/sell\">\r\n                Sell\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"card-body \">\r\n          <p className=\"float-right\"> Apad: {userapadbalance}</p>\r\n          <div class=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"Enter amount in Apad\"\r\n              value={TokenAmountValue}\r\n              onChange={(event)=>{\r\n                setTokenAmountValue(event.target.value)\r\n                const TokenAmount = event.target.value.toString();\r\n                setEtherOutput(TokenAmount / 1600);\r\n              }}\r\n            />\r\n            <span class=\"input-group-text\" id=\"basic-addon2\">\r\n              Apad\r\n            </span>\r\n          </div>\r\n          <p>Eth:{balanceineth} </p>\r\n\r\n          <div class=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              value={etherOutput}\r\n              placeholder=\"Enter amount in Eth\"\r\n            />\r\n            <span class=\"input-group-text\" id=\"basic-addon2\">\r\n              Eth\r\n            </span>\r\n          </div>\r\n          <button type=\"button\" class=\"btn btn-dark \" onClick={onsubmit}>Sell</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sell","import './App.css';\nimport Buy from './components/Buy';\nimport Navbar from './components/Navbar';\nimport { Routes, Route } from \"react-router-dom\";\nimport Sell from './components/Sell';\n\nfunction App() {\n  return (\n  <>\n    <Navbar/>\n    <Routes>\n      <Route path=\"/\" element={<Buy/>}/>\n      <Route path=\"/sell\" element={<Sell/>}/>\n    </Routes>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}